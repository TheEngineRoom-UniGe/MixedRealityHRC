//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using RosMessageGeneration;

namespace RosMessageTypes.BaxterHrc
{
    public class PlannedTrajectory : Message
    {
        public const string RosMessageName = "baxter_hrc/PlannedTrajectory";

        public string operation;
        public string arm;
        public Moveit.RobotTrajectory[] trajectory;

        public PlannedTrajectory()
        {
            this.operation = "";
            this.arm = "";
            this.trajectory = new Moveit.RobotTrajectory[0];
        }

        public PlannedTrajectory(string operation, string arm, Moveit.RobotTrajectory[] trajectory)
        {
            this.operation = operation;
            this.arm = arm;
            this.trajectory = trajectory;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(SerializeString(this.operation));
            listOfSerializations.Add(SerializeString(this.arm));
            
            listOfSerializations.Add(BitConverter.GetBytes(trajectory.Length));
            foreach(var entry in trajectory)
                listOfSerializations.Add(entry.Serialize());

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            var operationStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.operation = DeserializeString(data, offset, operationStringBytesLength);
            offset += operationStringBytesLength;
            var armStringBytesLength = DeserializeLength(data, offset);
            offset += 4;
            this.arm = DeserializeString(data, offset, armStringBytesLength);
            offset += armStringBytesLength;
            
            var trajectoryArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.trajectory= new Moveit.RobotTrajectory[trajectoryArrayLength];
            for(var i = 0; i < trajectoryArrayLength; i++)
            {
                this.trajectory[i] = new Moveit.RobotTrajectory();
                offset = this.trajectory[i].Deserialize(data, offset);
            }

            return offset;
        }

        public override string ToString()
        {
            return "PlannedTrajectory: " +
            "\noperation: " + operation.ToString() +
            "\narm: " + arm.ToString() +
            "\ntrajectory: " + System.String.Join(", ", trajectory.ToList());
        }
    }
}
